import groovy.json.JsonSlurper
import sample.gradle.plugin.ResourceDefinition
import sample.gradle.plugin.ResourceLoader
import sample.gradle.plugin.ResourceLoaderBase

// buildscript {
//     repositories {
//         maven {
//             url "http://192.168.33.10:8081/repository/test/"
//         }
//     }
//     dependencies {
//          classpath group: "sample.gradle", name: "i18nSupportPlugin", version: '1.0.0-SNAPSHOT'
//     }
// }

apply plugin: 'sample.gradle.plugin.L10nSupportPlugin'

l10n {
    baseDir "src/main/resources"
    sourceLang "ja"
    targetLang "en"

    source include: '**/locales/ja/*.json', loader: I18nextLoader
    source include: '**/l10n.json', loader: L10nLoader
    source include: '**/*_ja.properties'
    source '**/*_ja.json'
    source '**/*.csv'

    outputDir "${project.rootProject.buildDir}/l10n"
    prohibitedTerms file("${project.rootDir}/prohibited2.txt").readLines()
}


version = '1.0.0-SNAPSHOT'
group = "com.sample"



class I18nextLoader extends ResourceLoaderBase implements ResourceLoader {

    @Override
    Properties load(File file, String lang) {
        assert file.name.endsWith(".json")

        File f = getFile(file, lang)

        def p = new Properties()
        if (f.exists()) {
            Map json = new JsonSlurper().parseText(f.getText("utf-8")).get("member")
            json.each { k, v ->
                p.setProperty(k, v)
            }
        }
        return p
    }

    @Override
    File getFile(File source, String lang) {
        File parent = new File(source.parentFile.parentFile, lang)
        return new File(parent, source.name)
    }
}
class L10nLoader extends ResourceLoaderBase implements ResourceLoader {

    @Override
    Properties load(File file, String lang) {
        assert file.name.endsWith(".json")

        def p = new Properties()
        Map json = new JsonSlurper().parseText(file.getText("utf-8")).get(lang)
        if (json != null) {
            json.each { k, v ->
                p.setProperty(k, v)
            }
        }
        return p
    }

    @Override
    File getFile(File source, String lang) {
        return source
    }
}
